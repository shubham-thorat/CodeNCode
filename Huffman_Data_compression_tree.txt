#include<bits/stdc++.h>
#define ll long long
using namespace std;
class DataCompression
{
    struct Node{
        struct Node *left,*right;
        char ch;
        int sum; 
        bool operator<(const Node *a){
           return ( sum > a->sum );   
        }
    };
    unordered_map<string,char> U;
  public:
   Node *createNode(int sum,char str){
      Node *temp=new Node;
      temp->left=temp->right=NULL;
      temp->ch=str;
      temp->sum=sum;
      return temp;
   }
    void MakeTable(Node *root,string s){
        if(root->left==NULL && root->right==NULL){
           U[s]=root->ch;
           return;
        }
        if(root->left){
            string str=s+'0';
            MakeTable(root->left,str);
        }
        
        if(root->right){
            string str=s+'1';
            MakeTable(root->right,str);
        }
    }
   
     void Huffmantree(string str){
       vector<int> Map(128,0);
       for(int i=0;i<str.length();i++){
           Map[str[i]]++;
       }
       priority_queue<Node*> q;
       for(int i=0;i<128;i++){
          if(Map[i]!=0){
              Node *temp=createNode(Map[i],(char)i);
              q.push(temp);
          }
       }
       Node *first=q.top();
       q.pop();
       while(!q.empty()){
           Node *second=q.top();
           q.pop();
           Node *temp=createNode(first->sum + second->sum,'#');
           temp->left=first;
           temp->right=second;
           q.push(temp);
           first=q.top();
           q.pop();
       }
       //Head Node contains all adress of Huffman tree
       string s;
       MakeTable(first,s);      
       for(auto it:U){
           cout<<it.first<<" "<<it.second<<endl;
       }
       cout<<endl;   
   }
   string Decode(string s){
       int i=0;
       string str;
       string ans;
       while(i<s.length()){
           str=str+s[i];
           if(U.find(str)!=U.end()){
               ans+=U[str];
               string s;
               str=s;
           }
           i++;
       }
       return ans;
   }

};
int main()
{ 
   DataCompression d1;
   string str="AAABBCD";
   d1.Huffmantree(str);
   string s="1110101001000";
   cout<<"\nAns string : ";
   cout<<d1.Decode(s);
}