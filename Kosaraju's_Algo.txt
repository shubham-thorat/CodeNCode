#include<bits/stdc++.h>
using namespace std;

vector<vector<int>> v(8);   //Stored directed graph
vector<vector<int>> rev(8);  //stored transpose of graph
unordered_map<int,vector<int>> Map; //stored connected components of graph
void add_edge(int a,int b)
{
   v[a].push_back(b);
   rev[b].push_back(a);
}
void firstdfs(bool *seen,stack<int> &st,int n)
{
    seen[n]=1;
    for(int i=0;i<v[n].size();i++){
        if(seen[v[n][i]]==0){
            firstdfs(seen,st,v[n][i]);
            st.push(v[n][i]);
        }
    }
}
void seconddfs(int cnt,bool *seen,int curr)
{
    seen[curr]=1;
    for(int i=0;i<rev[curr].size();i++){
       if(seen[rev[curr][i]]==0){
           seconddfs(cnt,seen,rev[curr][i]);
           Map[cnt].push_back(rev[curr][i]);
       }
    }   
}
int main()
{
    add_edge(0,1);
    add_edge(1,2);
    add_edge(2,0);
    add_edge(2,3);
    add_edge(3,4);
    add_edge(4,5);
    add_edge(5,6);
    add_edge(6,7);
    add_edge(6,4);
    add_edge(4,7);
    //add_edge(6,4);
    bool seen[8]; memset(seen,0,sizeof(seen));
    stack<int> st;
    firstdfs(seen,st,0);   
    memset(seen,0,sizeof(seen));
    int cnt=0;
    while(!st.empty()){
        int curr=st.top();
        st.pop();
        if(seen[curr]==0){
           seconddfs(cnt,seen,curr);
           Map[cnt].push_back(curr);
           cnt++;
        }
    }   

    for(int i=0;i<cnt;i++){
        for(auto it:Map[i]){
            cout<<it<<" ";
        }
        cout<<"\n";
    }
}