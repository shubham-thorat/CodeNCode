#include<bits/stdc++.h>
using namespace std;
class Solution
{
class Tree
{
   Tree *next[2];
   int storedvalue;
   Tree() { storedvalue=-1; next[0]=NULL; next[1]=NULL; }
};
Tree* insert(Tree *root,int val)
{  Tree *temp=root;
   for(int i=31;i>=0;i--)
   {
       bool res=(val & (1<<i));
       if(temp->next[res]==NULL)
        temp->next[res]=new Tree(); 
       temp=temp->next[res];
   }
   temp->stroredvalue=val;
   return root;
}
int search(Tree* root,int val)
{
   Tree *temp=root;
   for(int i=31;i>=0;i--)
   {
       bool res=(val & (1<<i));
       if(temp->next[1-res]!=NULL)
        temp=temp->next[1-res];
       else
        temp=temp->next[res];
   }
   return (temp->storedvalue ^val);  
  }

    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
          int n = nums.size();
          // To get the correct order after sorting
          for(int i = 0; i < queries.size() ; i++)
              queries[i].push_back(i);
          // Sort the queries according to accending mi values     
          sort(queries.begin(),queries.end(), [](auto &a, auto &b){ return a[1] < b[1];});
          sort(nums.begin(), nums.end());
          int index = 0;
          TreeNode * root = new TreeNode();
          
          vector<int>res(queries.size(),-1);
          for(auto q : queries)
          {
              //keep inserting all the values which are lesser than mi in the trie
              while(index < n && nums[index] <= q[1])
              {
                  insert(root, nums[index]);
                  index ++;
              }
              // if any value inserted then we are now in a state of taking xor with atleast any number which satifies the limit                  condition
              if(index)
                res[q[2]] =  search(root, q[0]); 
          }
        return res;
    }
};
