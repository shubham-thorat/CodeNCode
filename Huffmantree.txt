#include<bits/stdc++.h>
using namespace std;
struct HNode
{
   int data;
   HNode *next,*left,*right;
   /*bool operator<(const HNode *a){
       return (data < a->data);
   }*/
};
HNode* create_Node(int data)
{
   HNode *temp=new HNode;
   temp->data=data;
   temp->left=temp->right=temp->next=NULL;
}
struct cmp
{
    bool operator()(const HNode *a,HNode *b){
       return (a->data > b->data);
    }
};
HNode* Huffman_Tree(HNode *head)
{
   priority_queue<HNode*,vector<HNode*>,cmp> p;
   HNode *t=head;
   while(t!=NULL){
      p.push(t);
      t=t->next;
   }
   HNode *first=p.top();
   p.pop();
   while(!p.empty()){
      HNode *second=p.top();
      cout<<first->data<<" "<<second->data<<endl;
      p.pop();
      HNode *temp=create_Node(first->data + second->data);
      temp->left=first;
      temp->right=second;
      p.push(temp);
      first=p.top();
      p.pop();
   }
  return first;
}
void showdata(HNode *head){
   while(head!=NULL){
      cout<<head->data<<" ";
      head=head->next;
   }
}
void Inorder(HNode *head)
{
   if(head){
      Inorder(head->left);
      cout<<head->data<<" ";
      Inorder(head->right);
   }
}
int main()
{
   HNode *head=NULL;
   head=create_Node(22);
   head->next=create_Node(12);
   head->next->next=create_Node(6);
   head->next->next->next=create_Node(62);
   head->next->next->next->next=create_Node(1);
   head->next->next->next->next->next=create_Node(15);
   head->next->next->next->next->next->next=create_Node(10);
   cout<<"Befor Huffman Tree : ";
   showdata(head); cout<<endl;
   HNode *New=Huffman_Tree(head);
   cout<<"After Huffman Tree : ";
   Inorder(New);

}
